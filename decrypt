#!/usr/bin/env python3.10

import os
import sys
import json
import hashlib

from base64 import b64decode
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


# Input & global variables
global dir_list, file_counter
dir_list = []
Name = None
file_counter = 0

for i in range(0, len(sys.argv)-1):
    i += 1
    if(sys.argv[i] == '-h' or sys.argv[i] == '--help'):
        print('\ndecrypt [Option] \n\nOptions:')
        print('-h / --help        -> shows this')
        print('DIRECTORY/FILENAME -> decrypts this file/directory')
        print('The script will automaticly detect wether the filename is \nencrypted or not')
        print('Same for the directorynames.')

        print('\nHow it works:')
        print('This script will hash ur passwd with sha256.')
        print('Then it will decrypt ur file with AES256, CBC mode.')
        print('The key will be the hashed passwd.')
        print('The iv is stored, like the ciphertext, in json format \nin the file.')
        print('U can use the file or the directory like u did before encrypting it.')
        exit()
    else:
        Name = sys.argv[i]
if(Name == None):
    Name = input('File or Directory: ')

key = hashlib.sha256(input('Passwd: ').encode()).digest()


# Functions
def decrypt(iv, ciphertext):
    iv = b64decode(iv)
    ct = b64decode(ciphertext)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    msg = unpad(cipher.decrypt(ct), AES.block_size)
    return msg

def decrypt_file(name, path):
    global dir_list, file_counter

    file = open(path, 'r')
    json_content = file.read()
    content = json.loads(json_content)
    file.close()

    if(content["type"] == "directory"):
        dir_list.append([name, path])
        return
    
    # decrypt content & save decrypted
    msg = decrypt(content["iv"], content["ciphertext"])
    try:
        file = open(path, 'w')
        file.write(msg)
    except Exception:
        file = open(path, 'wb')
        file.write(msg)
    file.close()
    file_counter += 1

    # decrypt filename
    try:
        filename = decrypt(content["name_iv"], content["name_ciphertext"]).decode("UTF-8")
    except Exception:
        # reason = "Filename wasnt encrypted."
        return
    
    # subsitude name with random string
    # 1. make sure it does only replace the name, not other dirs
    reversed_path = "".join(reversed(path))
    reversed_name = "".join(reversed(name))
    reversed_new_name = "".join(reversed(filename))
    new_reversed_path = reversed_path.replace(reversed_name, reversed_new_name, 1)
    new_path = "".join(reversed(new_reversed_path))
    os.rename(path, new_path)
    return

def recursive_decryption(name, path):
    path = str(path) + str("/") + str(name)
    if(os.path.isfile(path)):
        decrypt_file(name, path)
    elif(os.path.isdir(path)):
        for i in os.listdir(path):
            recursive_decryption(i, path)
    else:
        print("Error " + path)

def directory_decryption():
    for i in range(-len(dir_list), 0):
        real_i = -i - 1
        print(dir_list[real_i][1])
        print(dir_list[real_i][0])

    for i in range(-len(dir_list), 0):
        real_i = -i - 1

        print('Decrypting directorynames ... ' + "{}".format(real_i) + ' left')
                
        file = open(dir_list[i][1], 'r')
        json_content = file.read()
        content = json.loads(json_content)
        file.close()
        os.remove(dir_list[i][1])

        # subsitude name with random string
        # 1. make sure it does only replace the name, not other dirs
        directory_name = "/" + decrypt(content["iv"], content["ciphertext"]).decode("UTF-8")
        reversed_path = "".join(reversed(dir_list[real_i][1]))
        reversed_name = "".join(reversed(("/" + dir_list[real_i][0])))
        new_reversed_path_1 = reversed_path.replace(reversed_name, "", 1)
        new_reversed_path = new_reversed_path_1.replace(reversed_name, "".join(reversed(directory_name)), 1)
        new_path = "".join(reversed(new_reversed_path))
        os.rename("".join(reversed(new_reversed_path_1)), new_path)

    return



recursive_decryption(Name, os.getcwd())

# if files with type "directory" were found
if(len(dir_list) != 0):
    directory_decryption()
    dir_counter = len(dir_list)
else:
    dir_counter = 0

# output some stats
if(dir_counter == 0 and file_counter == 0):
    print('\n0 files and directories decrypted.')
    print('Are u sure the file / directory u tried to decrypt exists?')
elif(dir_counter == 1 and file_counter == 0):
    print('\n' '1 directory is successfully decrypted')
elif(dir_counter == 0 and file_counter == 1):
    print('\n' '1 file is successfully decrypted')
elif(dir_counter == 1 and file_counter == 1):
    print('\n' '1 file and 1 directory are successfully decrypted')
elif(dir_counter > 1 and file_counter == 0):
    print('\n' + "{}".format(dir_counter) +  ' directories are successfully decrypted')
elif(dir_counter == 0 and file_counter > 1):
    print('\n' + "{}".format(file_counter) + ' files are successfully decrypted')
else:
    print('\n' + "{}".format(file_counter) + ' files and ' + "{}".format(dir_counter) +  ' directories are successfully decrypted')
