#!/usr/bin/python3

from base64 import b64decode
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from Crypto.Random import get_random_bytes
import os, sys, json, hashlib, urllib.parse

# Which File/Directory?
try:
    if(sys.argv[1] =='-h' or sys.argv[1] == '--help'):
        print('\ndecrypt [Option] \n\nOptions:')
        print('-h / --help        -> shows this')
        print('DIRECTORY/FILENAME -> decrypts this file/directory')
        print('The script will automaticly detect wether the filename is \nencrypted or not')

        print('\nHow it works:')
        print('This script will hash ur passwd with sha256.')
        print('Then it will decrypt ur file with AES256, CBC mode.')
        print('Directories wont be compressed, it will decrypt all the files\nit contains with a recursive loop.')
        print('The key will be the hashed passwd.')
        print('The iv is stored, like the ciphertext, in json format \nin the file.')
        print('U can use the file or the directory like u did before encrypting it.')
        exit()
    else:
        Name = sys.argv[1]
except Exception:
    Name = input('File or Directory: ')

# Key
key = hashlib.sha256(input('Passwd: ').encode()).digest()

def recDecryption(Name, Path, counter):
    if(counter != 0):
        recDecryption.counterxyz = counter
    else:
        recDecryption.counterxyz = 0

    try:
        temppath = Path
        temptemppath = Path + '/' + Name
        TestIfDir = os.listdir(temptemppath)
        print('\ndecrypting: ...')
        print(TestIfDir)
        temppath = temppath + '/' + Name
        currlistdir = os.listdir(temppath)

        for i in range(0, len(currlistdir)):
            recDecryption(currlistdir[i], temppath, recDecryption.counterxyz)

    except Exception:
        PathName = temppath + '/' + Name
        
        File = open(PathName, 'r')
        json_input = File.read()
        File.close()
        
        currpath = os.getcwd()
        
        if currpath in PathName:
            relPath = PathName.replace(currpath, '')
            realrelPath = relPath[1:]

        # Decryption
        b64 = json.loads(json_input)
        iv = b64decode(b64['iv'])
        ct = b64decode(b64['ciphertext'])
        cipher = AES.new(key, AES.MODE_CBC, iv)
        pt = unpad(cipher.decrypt(ct), AES.block_size)

        # decrypt Filename
        plainName = None
        try:
            iv = b64decode(b64['NameIV'])
            rawName = bytes(b64decode(urllib.parse.unquote(Name)))
            newcipher = AES.new(key, AES.MODE_CBC, iv)
            plainName = unpad(newcipher.decrypt(rawName), AES.block_size)
        except Exception as error:
            encryptedFileNames = 0

        # Write encrypted stuff into the File
        try:
            File = open(PathName, 'w')
            File.write(pt)
            recDecryption.counterxyz = recDecryption.counterxyz + 1
        except Exception:
            File = open(PathName, 'wb')
            File.write(pt)
            recDecryption.counterxyz = recDecryption.counterxyz + 1
        except Exception as Error:
            print('Error: \n' + Error)
        File.close()

        # change Filename
        if(plainName != None):
            if Name in realrelPath:
                plainName = urllib.parse.quote(plainName, safe='')
                plainPathName = realrelPath.replace(Name, plainName)
            os.renames(PathName, plainPathName)
            print(plainPathName)
            plainPathName = None
        elif(plainName == None):
            print(realrelPath)

recDecryption(Name, os.getcwd(), 0)

if(recDecryption.counterxyz == 1):
    print('\nFile was successfully decrypted')
if(recDecryption.counterxyz > 1):
    print('\n' + "{}".format(recDecryption.counterxyz) + ' files are successfully decrypted')
if(recDecryption.counterxyz == 0):
    print('\nError occured')

