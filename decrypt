#!/usr/bin/python3

from base64 import b64decode
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from Crypto.Random import get_random_bytes
import os, sys, json, hashlib, urllib.parse

# Which File/Directory?
try:
    if(sys.argv[1] == '-h' or sys.argv[1] == '--help'):
        print('\ndecrypt [Option] \n\nOptions:')
        print('-h / --help        -> shows this')
        print('DIRECTORY/FILENAME -> decrypts this file/directory')
        print('The script will automaticly detect wether the filename is \nencrypted or not')
        print('Same for the directorynames.')

        print('\nHow it works:')
        print('This script will hash ur passwd with sha256.')
        print('Then it will decrypt ur file with AES256, CBC mode.')
        print('The key will be the hashed passwd.')
        print('The iv is stored, like the ciphertext, in json format \nin the file.')
        print('U can use the file or the directory like u did before encrypting it.')
        exit()
    else:
        Name = sys.argv[1]
except Exception:
    Name = input('File or Directory: ')

# Key
key = hashlib.sha256(input('Passwd: ').encode()).digest()

def recDecryption(Name, Path, counter):
    if(counter != 0):
        recDecryption.counterxyz = counter
    else:
        recDecryption.counterxyz = 0

    try:
        temppath = Path
        temptemppath = Path + '/' + Name
        TestIfDir = os.listdir(temptemppath)
        print('\ndecrypting: ...')
        print(TestIfDir)
        temppath = temppath + '/' + Name
        currlistdir = os.listdir(temppath)

        for i in range(0, len(currlistdir)):
            recDecryption(currlistdir[i], temppath, recDecryption.counterxyz)

    except Exception:
        PathName = temppath + '/' + Name

        try:
            File = open(PathName, 'r')
            json_input = File.read()
            File.close()
        except Exception:
            abc =1
            print('Debug information: error Line 60')
        
        currpath = os.getcwd()
        
        if currpath in PathName:
            relPath = PathName.replace(currpath, '')
            realrelPath = relPath[1:]

        # Decryption
        b64 = json.loads(json_input)
        try:
            type = b64['type']
            if(type == 'File'):
                raise Exception
            elif(type == 'Directory'):
                print('Decryption of the directories failed or failed to remove the dirname files.')
            else:
                print('Error Line 77: type = ' + type)
                raise Exception

        except Exception:
            iv = b64decode(b64['iv'])
            ct = b64decode(b64['ciphertext'])
            cipher = AES.new(key, AES.MODE_CBC, iv)
            pt = unpad(cipher.decrypt(ct), AES.block_size)

            # decrypt Filename
            plainName = None
            try:
                iv = b64decode(b64['NameIV'])
                rawName = bytes(b64decode(urllib.parse.unquote(Name)))
                newcipher = AES.new(key, AES.MODE_CBC, iv)
                plainName = unpad(newcipher.decrypt(rawName), AES.block_size)
            except Exception as error:
                encryptedFileNames = 0

            # Write encrypted stuff into the File
            try:
                File = open(PathName, 'w')
                File.write(pt)
                recDecryption.counterxyz = recDecryption.counterxyz + 1
            except Exception:
                File = open(PathName, 'wb')
                File.write(pt)
                recDecryption.counterxyz = recDecryption.counterxyz + 1
            except Exception as Error:
                print('Error: \n' + Error)
            File.close()

            # change Filename
            if(plainName != None):
                if Name in realrelPath:
                    plainName = urllib.parse.quote(plainName, safe='')
                    plainPathName = realrelPath.replace(Name, plainName)
                os.renames(PathName, plainPathName)
                plainPathName = None
            elif(plainName == None):
                print(realrelPath)


# Get the Directories for decryption
def GetDirs(Name, Path, DirectoryList):
    def createListofDirs(Name, Path, DirectoryList):
        DirectoryList = DirectoryList
        temptemppath = Path + '/' + Name
        try:
            TestIfDir = os.listdir(temptemppath)
            if Name in temptemppath:
                temptemppathWithoutName = temptemppath.replace(Name, '')
            directory = [Name, temptemppath, temptemppathWithoutName]
            DirectoryList.append(directory)
            for i in range(0, len(TestIfDir)):
                createListofDirs(TestIfDir[i], temptemppath, DirectoryList)
        except OSError:
            doSmth = None
    createListofDirs(Name, Path, DirectoryList)
    
    GetDirs.counter = 0

    for i in range(-len(DirectoryList), 0):
        
        customI = -i -1
        Directory = DirectoryList[customI]
        File = open(Directory[1] + '/' + Directory[0], 'r')
        jsoncontent = File.read()
        jsonStuff = json.loads(jsoncontent)

        iv = b64decode(jsonStuff['iv'])
        Name = jsonStuff['ciphertext']

        dirFile = Directory[1] + '/' + Name
        os.remove(dirFile) 


        rawName= b64decode(urllib.parse.unquote(Name))
        cipher = AES.new(key, AES.MODE_CBC, iv)
        plainName = unpad(cipher.decrypt(rawName), AES.block_size)
        
        OldNamePath = '/' + Directory[1]
        Name = Directory[0]
        plainName = urllib.parse.quote(plainName, safe='')
        
        if Name in OldNamePath:
            NewNamePath =  OldNamePath.replace(Name, '') + plainName
    
        os.rename(OldNamePath, NewNamePath)
        print('Decrypting directorynames ... ' + "{}".format(customI) + ' left')
        
        
        GetDirs.counter = GetDirs.counter + 1
        GetDirs.Name = plainName


# Functions get used
error = 0
if(GetDirs(Name, os.getcwd(), DirectoryList = [])):
    error = 0
else:
    recDecryption(Name, os.getcwd(), 0)
    error = 'Directorynames are not encrypted!'
if(error == 0):
    recDecryption(GetDirs.Name, os.getcwd(), 0)


# just some ouputs for the user
if(GetDirs.counter == 0 and recDecryption.counterxyz == 0):
    print('\n0 files and directories decrypted.')
    print('Are u sure the file / directory u tried to decrypt exists?')
elif(GetDirs.counter == 1 and recDecryption.counterxyz == 0):
    print('\n' '1 directory is successfully decrypted')
elif(GetDirs.counter == 0 and recDecryption.counterxyz == 1):
    print('\n' '1 file is successfully decrypted')
elif(GetDirs.counter == 1 and recDecryption.counterxyz == 1):
    print('\n' '1 file and 1 directory are successfully decrypted')
elif(GetDirs.counter > 1 and recDecryption.counterxyz == 0):
    print('\n' + "{}".format(GetDirs.counter) +  ' directories are successfully decrypted')
elif(GetDirs.counter == 0 and recDecryption.counterxyz > 1):
    print('\n' + "{}".format(recDecryption.counterxyz) + ' files are successfully decrypted')
else:
    print('\n' + "{}".format(recDecryption.counterxyz) + ' files and ' + "{}".format(GetDirs.counter) +  ' directories are successfully decrypted')
