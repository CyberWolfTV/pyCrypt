#!/bin/python3

import os
import sys
import json
import hashlib

from base64 import b64decode
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad


def pycrypt_help():
    print('\ndecrypt [Option] \n\nOptions:')
    print('-h / --help        -> shows this')
    print('DIRECTORY/FILENAME -> decrypts this file / directory')
    print('The script will automatically detect whether the filename or')
    print('the directory name is encrypted or not.')

    print('\nHow it works:')
    print('This script will hash ur passwd with sha256.')
    print('Then it will decrypt ur file with AES256, CBC mode.')
    print('The key will be the hashed passwd.')
    print('The iv is stored, like the ciphertext, in json format')
    print('in the file.')
    print('U can use the file or the directory like u did before')
    print('encrypting it.')


def get_name(name):
    while True:
        name = os.getcwd() + '/' + name
        name = os.path.normpath(name)
        if os.path.isfile(name) or os.path.isdir(name):
            return name
        if name in ('e', 'exit'):
            print('e / exit means exit...')
            sys.exit()
        name = input('File or Directory: ')


def list_dir_absolute_path(path):
    paths = []
    for i in os.listdir(path):
        paths.append(path + '/' + i)
    return paths


def decrypt(ciphertext, key, iv):
    iv = b64decode(iv)
    ct = b64decode(ciphertext)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    msg = unpad(cipher.decrypt(ct), AES.block_size)
    return msg


def replace_name(path, new_name):
    return path[0:path.rfind('/')+1] + new_name


def decrypt_file(path, key):
    try:
        with open(path, 'r') as file:
            data = json.loads(file.read())
    except (ValueError, UnicodeDecodeError):
        print(path)
        print('FILE WAS DAMAGED OR NOT ENCRYPTED WITH PYCRYPT')
        return 2

    if data['type'] == 'directory':
        return 1

    msg = decrypt(data['ct'], key, data['iv'])
    with open(path, 'wb') as file:
        file.write(msg)

    if 'name_ct' in data:
        real_name = decrypt(data['name_ct'], key, data['name_iv'])
        new_path = replace_name(path, real_name.decode('UTF-8'))
        os.rename(path, new_path)
    return 0


def decrypt_directories(directory_name_files, key):
    for path in reversed(directory_name_files):
        with open(path, 'r') as file:
            data = json.loads(file.read())
        directory_name = decrypt(data['ct'], key, data['iv']).decode('UTF-8')

        directory_path = path[0:path.rfind('/')]
        real_directory_path = replace_name(directory_path, directory_name)

        os.remove(path)
        os.rename(directory_path, real_directory_path)


def decrypt_all(path, key):
    directory_name_files = []
    file_counter = 0

    path_stack = [path]
    while path_stack:
        path = path_stack.pop(-1)
        if os.path.isfile(path):
            status = decrypt_file(path, key)
            if status == 0:
                file_counter += 1
            elif status == 1:
                directory_name_files.append(path)
            elif status == 2:
                continue
        elif os.path.isdir(path):
            path_stack += list_dir_absolute_path(path)
        else:
            print("\nThis filetype is unsupported!")
            print(path)

    decrypt_directories(directory_name_files, key)
    return {'files': file_counter, 'directories': len(directory_name_files)}


def output_stats(stats):
    dirs = stats['directories']
    files = stats['files']
    print()
    if dirs == 0 and files == 0:
        print('0 files and 0 directories decrypted.')
    elif dirs == 1 and files == 0:
        print('1 directory is successfully decrypted')
    elif dirs == 0 and files == 1:
        print('1 file is successfully decrypted')
    elif dirs == 1 and files == 1:
        print('1 file and 1 directory are successfully decrypted')
    elif dirs > 1 and files == 0:
        print(dirs, 'directories are successfully decrypted')
    elif dirs == 0 and files > 1:
        print(files, 'files are successfully decrypted')
    elif dirs == 1 and files > 1:
        print('1 directory and', files, 'files are successfully decrypted')
    else:
        print(files, 'files and')
        print(dirs, 'directories are successfully decrypted')


def main():
    path = ''
    sys.argv.pop(0)
    for arg in sys.argv:
        if arg in ('-h', '--help'):
            pycrypt_help()
            sys.exit()
        else:
            path = arg
    path = get_name(path)

    print('U are going to decrypt: ' + path)

    key = hashlib.sha256(input('Passwd: ').encode()).digest()

    stats = decrypt_all(path, key)

    output_stats(stats)


if __name__ == '__main__':
    main()
