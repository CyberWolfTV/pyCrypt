#!/usr/bin/env python3.10

import os
import sys
import json
import hashlib
import urllib.parse
import random
import string

from base64 import b64encode
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes

# Options
# Which File/Directory?
Name = None
# other options
encrypt_dir_name = None
encrypt_file_name = None
no_questions = None

file_counter = 0
dir_list = []

def ask(question, default):
    input1 = input(question)
    if(input1 == '' or input1 == None):
        input1 = default
    if(input1 == 'n' or input1 == 'N'):
        return 0
    elif(input1 == 'y' or input1 == 'Y'):
        return 1
    else:
        ask(question, default)


for i in range(0, len(sys.argv) - 1):
    i += 1
    if(sys.argv[i] =='-h' or sys.argv[i] == '--help'):
        print('\nencrypt [Option] \n\nOptions:')
        print('-h / --help            -> shows this')
        print('DIRECTORY / FILENAME   -> encrypts this file/directory')
        print('-fn / --filenames      -> encrypts filenames too')
        print('-dn / --directorynames -> encrypts directorynames too')
        print('-nq / --no-questions   -> does not ask any questions')

        print('\nHow it works:')
        print('This script will hash ur passwd with sha256.')
        print('Then it will encrypt ur file with AES256, CBC mode.')
        print('Directories wont be compressed, it will encrypt all the files\nit contains with a recursive loop.')
        print('The key will be the hashed passwd.')
        print('The iv will be stored, like the ciphertext, in json format \nin the file.')
        print('U can decrypt the file or the directory with the command "decrypt".')
        exit()
    elif(sys.argv[i] == '-fn' or sys.argv[i] == '--filenames'):
        fn = 1
    elif(sys.argv[i] == '-dn' or sys.argv[i] == '--directorynames'):
        dn = 1
    elif(sys.argv[i] == '-nq' or sys.argv[i] == '--no-questions'):
        nq = 1
    else:
        Name = sys.argv[i]

if(Name == None):
    Name = input('File or Directory: ')
if(encrypt_file_name == None and no_questions == None):
    file_name = ask('Encrypt filenames? [y/N] ', 'n', 'N')
if(encrypt_dir_name == None and no_questions == None):
    dir_name = ask('Encrypt directorynames? [y/N] ', 'n', 'N')

print('U are going to encrypt: ' + Name)

key = hashlib.sha256(input('Passwd: ').encode()).digest()

def encrypt(msg):
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(msg, AES.block_size))
    iv = b64encode(cipher.iv).decode('utf-8')
    cipher_text = b64encode(ct_bytes).decode('utf-8')
    return [iv, cipher_text]

def encrypt_file(name, path):
    try:
        File = open(path, 'r')
        msg = bytes(File.read().encode())
        File.close()
    except Exception:
        File = open(path, 'rb')
        msg = File.read()
        File.close()
    except Exception as Error:
        print('Error: \n' + Error)
    
    content = encrypt(msg)

    if(encrypt_file_name):
        file_name = encrypt(name)
        result = json.dumps({'iv':content[0], 'ciphertext':content[1], 'NameIV':file_name[0], 'NameCiphertext':file_name[1], 'type':"file"})
    else:
        result = json.dumps({'iv':content[0], 'ciphertext':content[1], 'type':"file"})

    return result

def recursive_encryption(name, path):
    path = path + "/" + name
    if(os.path.isfile(path)):
        file_counter += 1
        encrypt_file(name, path)
    elif(os.path.isdir(path)):
        dir_list.append([name, path])
        for i in os.listdir(path):
            recursive_encryption(i, path)
    else:
        print("Error: " + path)
    return

def directory_encryption():
    # why not from 0 to len(...)
    # -> start with the deepest paths
    #    otherwise paths will change
    for i in range(-(len(dir_list)+1), 0):
        real_i = -i

        print('Encrypting directorynames ... ' + "{}".format(real_i+1) + ' left')

        # Encryption process
        newcipher = AES.new(key, AES.MODE_CBC)
        data = bytes(dir_list[real_i][0].encode())
        cn = newcipher.encrypt(pad(data, AES.block_size))
        name_iv = b64encode(newcipher.iv).decode('utf-8')
        cipher_name = b64encode(cn).decode('utf-8')

        # subsitude name with random string
        # 1. make sure it does only replace the name, not other dirs
        random_name = "".join(random.choice(string.ascii_letters) for x in range(20))
        reversed_path = "".join(reversed(dir_list[real_i][1]))
        reversed_name = "".join(reversed(dir_list[real_i][0]))
        new_reversed_path = reversed_path.replace(reversed_name, "".join(reversed(random_name)), 1)
        new_path = "".join(reversed(new_reversed_path))

        # save the encrypted name
        filename = dir_list[real_i][1] + "/" + random_name
        try:
            dir_name_file = open(file_name, 'x')
            dir_name_file.close()
            dir_name_file = open(file_name, 'w')
        except Exception as error:
            print(error)
        encrypted_dir_name = json.dumps({'iv':name_iv, 'ciphertext':cipher_name, 'type':"directory"})
        dir_name_file.write(encrypt_dir_name)

        # rename directory
        os.rename(dir_list[real_i][1], new_path)
    return

# call the encrypt functions
recursive_encryption(Name, os.getcwd)

if(encrypt_dir_name):
    directory_encryption()
    dir_counter = len(dir_list)
else:
    dir_counter = 0


# output some stats
if(dir_counter == 0 and file_counter == 0):
    print('\n0 files and directories encrypted.')
    print('Are u sure the file / directory u tried to encrypt exists?')
elif(dir_counter == 1 and file_counter == 0):
    print('\n' '1 directory is successfully encrypted')
elif(dir_counter == 0 and file_counter == 1):
    print('\n' '1 file is successfully encrypted')
elif(dir_counter == 1 and file_counter == 1):
    print('\n' '1 file and 1 directory are successfully encrypted')
elif(dir_counter > 1 and file_counter == 0):
    print('\n' + "{}".format(file_counter) +  ' directories are successfully encrypted')
elif(dir_counter == 0 and file_counter > 1):
    print('\n' + "{}".format(file_counter) + ' files are successfully encrypted')
else:
    print('\n' + "{}".format(file_counter) + ' files and ' + "{}".format(dir_counter) +  ' directories are successfully encrypted')
