#!/bin/python3

import os
import sys
import json
import hashlib
import random
import string

from base64 import b64encode

try:
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import pad
except ModuleNotFoundError:
    from Cryptodome.Cipher import AES
    from Cryptodome.Util.Padding import pad


def pycrypt_help():
    print('\nencrypt [Option] \n\nOptions:')
    print('-h / --help             -> shows this')
    print('DIRECTORY / FILENAME    -> encrypts this file/directory')
    print('-fn / --filenames       -> encrypts filenames too')
    print('-dn / --directory-names -> encrypts directory names too')
    print('-nq / --no-questions    -> does not ask questions')

    print('\nHow it works:')
    print('This script will hash ur passwd with sha256.')
    print('Then it will encrypt ur file with AES256, CBC mode.')
    print('The key will be the hashed passwd.')
    print('Directories wont be compressed, it will encrypt all the files')
    print('it contains file by file.')
    print('The iv will be stored, like the ciphertext, in json format')
    print('in the file.')
    print('For decryption use the command \'decrypt\'.')


def ask(question, default):
    while True:
        answer = input(question).lower()
        if answer == '' or answer is None:
            answer = default.lower()
        if answer == 'n':
            return False
        if answer == 'y':
            return True


def get_name(name):
    while True:
        name = os.getcwd() + '/' + name
        name = os.path.normpath(name)
        if os.path.isfile(name) or os.path.isdir(name):
            return name
        if name in ('e', 'exit'):
            print('e / exit means exit...')
            sys.exit()
        name = input('File or Directory: ')


def replace_name(path, new_name):
    return path[0:path.rfind('/')+1] + new_name


def list_dir_absolute_path(path):
    paths = []
    for i in os.listdir(path):
        paths.append(path + '/' + i)
    return paths


def encrypt(msg, key):
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(msg, AES.block_size))
    iv = b64encode(cipher.iv).decode('utf-8')
    cipher_text = b64encode(ct_bytes).decode('utf-8')
    return {'iv': iv, 'ct': cipher_text}


def encrypt_file(path, key, encrypt_file_names):
    with open(path, 'rb') as file:
        msg = file.read()

    content = encrypt(msg, key)
    content['type'] = 'file'

    if encrypt_file_names:
        random_name = ''.join(random.choice(string.ascii_letters) for x in range(20))
        new_path = replace_name(path, random_name)
        encrypted_name = encrypt(bytes(path[path.rfind('/') + 1:].encode()), key)

        content['name_ct'] = encrypted_name['ct']
        content['name_iv'] = encrypted_name['iv']

        os.rename(path, new_path)
        path = new_path

    with open(path, 'w') as file:
        file.write(json.dumps(content))


def encrypt_files(path, key, encrypt_filenames):
    file_counter = 0
    path_stack = [path]
    while path_stack:
        path = path_stack.pop(-1)
        if os.path.isfile(path):
            file_counter += 1
            encrypt_file(path, key, encrypt_filenames)
        elif os.path.isdir(path):
            path_stack += list_dir_absolute_path(path)
        else:
            print("\nThis filetype is unsupported!")
            print(path)
    return file_counter


def encrypt_directory(path, key):
    random_name = ''.join(random.choice(string.ascii_letters) for x in range(20))
    new_path = replace_name(path, random_name)
    encrypted_name = encrypt(bytes(path[path.rfind('/')+1:].encode()), key)
    encrypted_name['type'] = 'directory'

    name_file = path + '/' + random_name
    with open(name_file, 'w') as file:
        file.write(json.dumps(encrypted_name))

    os.rename(path, new_path)
    return new_path


def encrypt_directories(path, key):
    directory_counter = 0
    path_stack = [path]
    while path_stack:
        path = path_stack.pop(-1)
        if os.path.isdir(path):
            directory_counter += 1
            path = encrypt_directory(path, key)
            path_stack += list_dir_absolute_path(path)
    return directory_counter


def output_stats(stats):
    dirs = stats['directories']
    files = stats['files']
    print()
    if dirs == 0 and files == 0:
        print('0 files and 0 directories encrypted.')
    elif dirs == 1 and files == 0:
        print('1 directory is successfully encrypted')
    elif dirs == 0 and files == 1:
        print('1 file is successfully encrypted')
    elif dirs == 1 and files == 1:
        print('1 file and 1 directory are successfully encrypted')
    elif dirs > 1 and files == 0:
        print(dirs, 'directories are successfully encrypted')
    elif dirs == 0 and files > 1:
        print(files, 'files are successfully encrypted')
    elif dirs == 1 and files > 1:
        print('1 directory and', files, 'files are successfully encrypted')
    else:
        print(files, 'files and')
        print(dirs, 'directories are successfully encrypted')


def main():
    configs = {'target': '', 'dn': False, 'fn': False, 'nq': False}
    sys.argv.pop(0)
    for arg in sys.argv:
        if arg in ('-h', '--help'):
            pycrypt_help()
            sys.exit()
        elif arg in ('-fn', '--filenames'):
            configs['fn'] = True
        elif arg in ('-dn', '--directory-names'):
            configs['dn'] = True
        elif arg in ('-nq', '--no-questions'):
            configs['nq'] = True
        else:
            configs['target'] = arg
    configs['target'] = get_name(configs['target'])

    if not configs['fn'] and not configs['nq']:
        configs['fn'] = ask('Encrypt filenames? [y/N] ', 'n')
    if not configs['dn'] and not configs['nq']:
        configs['dn'] = ask('Encrypt directory names? [y/N] ', 'n')

    print('U are going to encrypt: ' + configs['target'])

    key = hashlib.sha256(input('Passwd: ').encode()).digest()

    stats = {'files': 0, 'directories': 0}

    stats['files'] = encrypt_files(configs['target'], key, configs['fn'])
    if configs['dn']:
        stats['directories'] = encrypt_directories(configs['target'], key)

    output_stats(stats)


if __name__ == '__main__':
    main()
